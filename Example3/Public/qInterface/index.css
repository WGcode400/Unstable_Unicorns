/**************************************
**
** Major tags
**
***************************************/

/* Make the page take the entire usable area. */
html, body
{
  width: 100%;
  height: 100%;

  margin: 0;
  padding: 0;

  /* Kiosk mode doesn't want scroll bars */
  overflow: hidden;
}

body
{
}

/*
** The <main> tag is where the user interface is displayed.  It takes
** the entire view area.
*/
main
{
  display: flex;
  flex-direction: row;
  width: 100%;
  height: 100%;
}
#button {
    position: absolute;
    bottom: 0;
    left: 0;
    border: medium solid rgba( 255, 255, 255, 0.5 );
    border-radius: 4px;
    padding: 4px;
    margin: 4px;
    background-color: white;
}
/*
** The <nav> is used to place main screen navigation icons.
** Note that these icons are positioned absolutely on the screen.  Thus the
** holding tag <nav> doesn't have a position.
*/
nav
{
}

/*
** The footer is used to house all error and loading elements.
*/
footer
{
}

main section
{
  height: 100%;
}

/**************************************
**
** Error indication.
** These areas are located in the <footer> tag.
**
*/

/*
** Critical errors prevent the application from continuing to run.
** They block the entire page and prevent further interaction.
**
*/

/* Outer most <div> used to dim/disable the rest of page. */
.criticalError
{
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  background-color: rgba( 0, 0, 0, 0.85 );
  z-index: 10000;

  display: flex;
  align-items: center;
  justify-content: center;

  color: white;
  display: none;
}

/* A framed <div> centered on screen to display error message. */
.criticalError > div:first-of-type
{
  min-width: 400px;
  min-height: 25%;
  border-radius: 10px;
  box-shadow: 0px 0px 5px 5px yellow;
  padding: 0 1em;

  background-color: black;
  text-align: center;
}

/* Heading (used to announce error) */
.criticalError div h2
{
  font-size: xx-large;
  color: red;
}

/*
** Runtime errors are mistakes in the implementation that prevent the
** application from continuing.
*/

#runtimeErrorMain
{
  height: initial;
  max-height: calc( 100% - 20px );
  overflow: hidden;
}

#runtimeErrorDiv
{
  max-height: 10em;
  overflow: auto;
}

#runtimeError p
{
  margin: 5px 0;
}

/*
** The loading <div> is used disable interaction with the main screen until
** the screen has finished loading and is ready to use.
*/

#loadingDiv
{
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  background-color: rgba( 0, 0, 0, 0.85 );

  display: flex;
  align-items: center;
  justify-content: center;

  color: white;
}

#loadingInnerDiv
{
  position: relative;
  width: 50%;
  height: 25%;
  border-radius: 10px;
  box-shadow: 0px 0px 5px 5px white;

  background-color: gray;
  text-align: center;
  font-size: xx-large;

  display: flex;
  align-items: center;
  justify-content: center;
}

#loadingSpinner
{
  position: absolute;
  left: 75px;
  width:  50px;
  height: 50px;
}

@keyframes spin
{
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}





/*
**
** Map
**
*/

#map
{
  flex-grow: 1;
  background-color: var( --map-background );

  position: relative;
}

#floorPlanDiv
{
  width: 100%;
  height: 100%;
  max-height: 100%;
  position: relative;
}

#noMapDiv
{
  position: absolute;
  top: 50%;
  left: 50%;
  text-align: center;
}

#noMapDiv div
{
  transform: translate(-50%, -50%);
  font-size: 300%;
}

/*
** Floor plan object takes the entire area of #floorPlanDiv.
**/
#floorPlan
{
  position: absolute;
  top: 0;
  left: 0;

  width: 100%;
  height: 100%;
}




/**************************************
**
** Examples.
**
*/
.example2_container
{
  width: 100%;
  height: 100%;
  overflow: auto;

  /* Make a grid */
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-content: flex-start;
}

.example2, .example3
{
  /* Maximum width for entry. */
  width: 350px;

  /* Purely cosmetic in order of ascetics. */
  margin: 5px;
  padding: 5px;
  font-size: small;
  border: medium solid black;
  background-color: #cbdfe7;
  border-radius: 5px;
  box-shadow: 2px 2px 4px black;

  display: flex;
  /*flex-flow: row;
  justify-content: space-around;
  flex-flow: row nowrap;
  align-items: stretch;*/

  text-align: center;
  /*align-items: center;
  align-content: stretch;
  flex-direction: row;*/
}

.example2:hover, .example3:hover
{
  background-color: #73abbf;
}

.example2 img, .example3 img
{
  border: 2px solid white;
  border-radius: 3px;
  box-shadow: 1px 1px 2px black;
  margin: auto;
}

.example3 > div
{
  /*border: thin solid black;*/
  flex-grow: 1;
  display: flex;
  align-items: center;
}

.example3 > div > div
{
  width: 100%;
}

.example2 figure, .example3 > div:first-child
{
  width: 155px;
  display: flex;
  margin-right: 5px;
  /*flex-flow: column;*/
  flex: 0 0 auto;
}

.example2 section, .example3 section
{
  border: thin solid black;
  /*flex: 1 1 auto;*/
  flex-grow: 1;
}

.example2 h1, .example3 h1
{
  margin-top: 0;
  font-size: medium;
}

.example2 p, .example3 p
{
  margin: 0;
}

@keyframes example3
{
  from
  {
    border-color: yellow;
  }
  to
  {
    border-color: black;
  }
}

.example3
{
  animation-name: example3;
  animation-duration: 0.5s;
}
